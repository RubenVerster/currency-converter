{"version":3,"sources":["components/Header.tsx","components/Converter.tsx","components/ConversionHistory.tsx","components/HistoricalData.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","Converter","options","setHistory","rates","useState","selectedFromCurrencyConversion","setSelectedFromCurrencyConversion","selectedToCurrencyConversion","setSelectedToCurrencyConversion","convertAmount","setConvertAmount","calculateConversion","exchangeFrom","converted","toFixed","prevState","from","amount","to","onSubmit","e","preventDefault","handleSubmit","htmlFor","type","name","id","placeholder","value","onChange","currentTarget","handleInputChange","handleFromChange","map","option","handleToChange","onClick","temp_storage","handleSwop","ConversionHistory","historyItems","length","Math","random","renderHistoryList","HistoricalData","historicalData","setHistoricalData","loadingMessage","setLoadingMessage","error","setError","useEffect","dates","forEach","date","a","searchHistoricalData","index","push","dayjs","add","format","axios","get","process","response","data","sort","b","Date","dataUnit","unitCurrencyKeys","Object","keys","currencyKey","renderHistoricalData","require","config","console","log","BASE_URL","App","retrieveCurrencies","currencies","setCurrencyListOptions","setExchangeRates","alert","exchangeRates","currencyListOptions","conversionHistory","setConversionHistory","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.beabc7ab.chunk.js","sourcesContent":["export default function Header() {\r\n  return (\r\n    <div className=\"bg-white text-center\">\r\n      <h1 className=\"container text-center mx-auto text-2xl p-4 mb-4\">\r\n        <span>$</span> Currency Converter <span>Â¥</span>\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n","import { ReactEventHandler, useState } from 'react';\r\nimport { BsArrowUpDown } from 'react-icons/bs';\r\n\r\ntype IRates = {\r\n  //error fix used to ignore the object key type (don't know that much TS)\r\n  //@ts-ignore\r\n  [x: string | number]: number;\r\n};\r\n\r\ninterface IConverterProps {\r\n  options: string[];\r\n  setHistory: any;\r\n  rates: {\r\n    currency: IRates[];\r\n  };\r\n}\r\n\r\n/**\r\n * Component used to display the UI for the component that manages currency conversions\r\n * @param options props received from App.tsx that provides the individual currency symbols for the dropdown list\r\n * @param setHistory hook from App.tsx that allows you to update the search history of currency exchanges from the user\r\n *\r\n * @param rates object from App.tsx that provides the currency key and the exchange rate for that currency\r\n */\r\nconst Converter = ({ options, setHistory, rates }: IConverterProps) => {\r\n  //state hook used to save the currency that the user want to convert from\r\n  const [selectedFromCurrencyConversion, setSelectedFromCurrencyConversion] =\r\n    useState<string>('EUR');\r\n  //state hook used to save the currency that the user want to convert to\r\n  const [selectedToCurrencyConversion, setSelectedToCurrencyConversion] =\r\n    useState<string>('USD');\r\n  //state hook used to manage the number that a user wants to convert from\r\n  const [convertAmount, setConvertAmount] = useState<number | string | any>(1);\r\n\r\n  //function that is used to set the number amount that the user wants to convert\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setConvertAmount(e.currentTarget.value);\r\n  };\r\n  //function that is used to set the currency that a user wants to convert from\r\n  const handleFromChange = (e: React.FormEvent<HTMLSelectElement>) => {\r\n    setSelectedFromCurrencyConversion(e.currentTarget.value);\r\n  };\r\n  //function that is used to set the currency that a user wants to convert to\r\n  const handleToChange = (e: React.FormEvent<HTMLSelectElement>) => {\r\n    setSelectedToCurrencyConversion(e.currentTarget.value);\r\n  };\r\n\r\n  //function used to handle the logic when a user submits the form by clicking the Calculate button\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    calculateConversion();\r\n  };\r\n\r\n  //function that switches the convert from and to currencies\r\n  const handleSwop = () => {\r\n    //temporily stores one of the currencies\r\n    let temp_storage = selectedToCurrencyConversion;\r\n    //sets the To convert currency with the From currency\r\n    setSelectedToCurrencyConversion(selectedFromCurrencyConversion);\r\n    //sets the From currency one with the temporary To currency we saved\r\n    setSelectedFromCurrencyConversion(temp_storage);\r\n  };\r\n\r\n  const calculateConversion = () => {\r\n    // error fixes used to fix the key value of the exchange rate per currency\r\n    //@ts-ignore\r\n    let exchangeFrom = rates[selectedFromCurrencyConversion];\r\n    //@ts-ignore\r\n    let exchangeTo = rates[selectedToCurrencyConversion];\r\n    let converted = ((exchangeTo / exchangeFrom) * convertAmount).toFixed(2);\r\n\r\n    //hook that updates the details of the user's currency convertion to the state hook that stores the user currency conversion history\r\n    //adds the latest conversion to the front of the conversion history array and spreads the previous state after it\r\n    //error fix used because this is currently out of my scope in TS...\r\n    //@ts-ignore\r\n    setHistory((prevState) => [\r\n      {\r\n        from: selectedFromCurrencyConversion,\r\n        amount: convertAmount,\r\n        to: selectedToCurrencyConversion,\r\n        converted: converted,\r\n      },\r\n      ...prevState,\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"md:w-6/12 w-full \">\r\n      <form\r\n        className=\"flex flex-col border-2 border-blue-300 bg-white m-6 p-4 rounded-sm\"\r\n        onSubmit={(e) => handleSubmit(e)}\r\n      >\r\n        <div>\r\n          <label\r\n            htmlFor=\"from\"\r\n            className=\"block text-sm font-medium text-gray-700\"\r\n          >\r\n            Convert From\r\n          </label>\r\n          <div className=\"mt-1 relative rounded-md shadow-sm border-2\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"from\"\r\n              id=\"from\"\r\n              className=\"h-12 block w-full pl-2 pr-12 sm:text-sm border-gray-300 rounded-md\"\r\n              placeholder={convertAmount}\r\n              value={convertAmount}\r\n              onChange={(e) => handleInputChange(e)}\r\n            />\r\n            <div className=\"absolute inset-y-0 right-0 flex items-center\">\r\n              <label htmlFor=\"currencyFrom\" className=\"sr-only\">\r\n                Currency\r\n              </label>\r\n              <select\r\n                id=\"currencyFrom\"\r\n                name=\"currencyFrom\"\r\n                onChange={(e) => handleFromChange(e)}\r\n                value={selectedFromCurrencyConversion}\r\n                className=\"h-full py-0 pl-2 pr-7 w-32 border-l-2 bg-transparent text-gray-500 sm:text-sm rounded-r-md\"\r\n              >\r\n                {options.map((option: string) => {\r\n                  return (\r\n                    <option key={option} className=\"text-sm\">\r\n                      {option}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className=\"mt-4 relative rounded-md shadow-sm\">\r\n            <label\r\n              htmlFor=\"from\"\r\n              className=\"block text-sm font-medium text-gray-700\"\r\n            >\r\n              Convert To\r\n            </label>\r\n            <div className=\"flex justify-between items-center border-2 bg-white rounded-md w-full\">\r\n              <select\r\n                id=\"currencyTo\"\r\n                name=\"currencyTo\"\r\n                onChange={(e) => handleToChange(e)}\r\n                className=\"w-full h-12 py-2 pl-2 pr-7 border-transparent  text-gray-500 sm:text-sm rounded-md\"\r\n                value={selectedToCurrencyConversion}\r\n              >\r\n                {options.map((option: string) => {\r\n                  return <option key={option}>{option}</option>;\r\n                })}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex flex-row justify-between h-18\">\r\n          <button\r\n            className=\"mt-4 hover:bg-blue-700 bg-gray-700 rounded-md p-3 text-white w-8/12\"\r\n            type=\"submit\"\r\n          >\r\n            Calculate\r\n          </button>\r\n          <button\r\n            className=\"mt-4 w-4/12 ml-2 p-3 bg-white border-2 rounded-md flex justify-center md:justify-between  items-center text-center text-gray-700 hover:bg-gray-700 hover:text-white\"\r\n            onClick={() => handleSwop()}\r\n          >\r\n            <span className=\"hidden md:block text-md \">Swop Currencies</span>\r\n            <div className=\"text-2xl\">\r\n              <BsArrowUpDown />\r\n            </div>\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Converter;\r\n","interface IHistoryItem {\r\n  amount: number;\r\n  from: string;\r\n  to: string;\r\n  converted: number;\r\n}\r\n\r\n/**\r\n * component that manages rendering the UI for the user's currency conversion history\r\n * @param historyItems props received from App.tsx\r\n */\r\n//TS error fixed used for array that contains IHistoryItem array\r\n//@ts-ignore\r\nconst ConversionHistory = ({ historyItems }) => {\r\n  const renderHistoryList = (historyItems: IHistoryItem[]) => {\r\n    if (historyItems.length < 1) {\r\n      //if the user does not have any currency conversions in his history, we display a placeholder message instead\r\n      return (\r\n        <div className=\"pt-2 flex items-center content-center\">\r\n          <p className=\"text-gray-400 text-center p-6 h-full\">\r\n            All your previous conversions will be saved here\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      //if a user has a currency conversion in their history, map over the history array and generate a UI for each conversion's details\r\n      return (\r\n        <div className=\"text-center my-3\">\r\n          {historyItems.map(({ amount, from, to, converted }: IHistoryItem) => {\r\n            return (\r\n              <p key={Math.random()}>\r\n                {amount}\r\n                <span className=\"font-bold px-1\">{from}</span>\r\n                <span className=\"pr-1\">=</span>\r\n                {converted}\r\n                <span className=\"font-bold px-1\">{to}</span>\r\n              </p>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\" bg-white rounded-sm border-2 border-blue-300 py-6 pt-2 m-6  md:w-3/12\">\r\n      <h2 className=\"text-center text-xl mt-0 font-bold\">\r\n        Previous Conversions\r\n      </h2>\r\n      <div className=\"conversions\">{renderHistoryList(historyItems)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConversionHistory;\r\n","import { useEffect, useState } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport axios from 'axios';\r\n\r\ninterface IdataUnit {\r\n  date: string;\r\n  rates: {\r\n    currencyKey: string | object;\r\n  };\r\n}\r\n\r\n/**\r\n * This component manages the returning the UI for the exchange rates from Euro for the past 7 days\r\n * */\r\nconst HistoricalData = () => {\r\n  const { REACT_APP_ACCESS_KEY } = process.env;\r\n  /**\r\n   * This is a React hook that is used to store the data for the data related to the exchange rates for the past 7 days\r\n   */\r\n  const [historicalData, setHistoricalData] = useState([]);\r\n  const [loadingMessage, setLoadingMessage] = useState<string>(\r\n    'Loading historical exchange rates...'\r\n  );\r\n  const [error, setError] = useState<boolean>(false);\r\n\r\n  /**\r\n   * This hook runs when this component first mount\r\n   * It does an API call for each day in the past 7 days\r\n   */\r\n  useEffect(() => {\r\n    dates.forEach(async (date: string) => await searchHistoricalData(date));\r\n  }, []);\r\n\r\n  //This stores the dates that we need for each API call\r\n  const dates: string[] = [];\r\n\r\n  //This loop runs 7 times and generates the array for each day we need to use in the API call\r\n  for (let index = 0; index < 7; index++) {\r\n    dates.push(dayjs().add(-index, 'day').format('YYYY-MM-DD'));\r\n  }\r\n\r\n  /**This function is used to do seperate API calls for the eschange rates of each day\r\n   * @param date when we iterate through the dates array, this is the function that is use3d to do a single exchange rate for the day\r\n   */\r\n  const searchHistoricalData = async (date: string) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://api.exchangeratesapi.io/v1/${date}?access_key=${REACT_APP_ACCESS_KEY}&symbols=USD,AUD,CAD,PLN,MXN`\r\n      );\r\n\r\n      //@ts-ignore\r\n      //Fixes error date object not being able to accepted into a prevState hook\r\n      await setHistoricalData((prevState) => [\r\n        {\r\n          rates: response.data.rates,\r\n          date: response.data.date,\r\n        },\r\n        ...prevState,\r\n      ]);\r\n    } catch (error) {\r\n      setError(true);\r\n      setLoadingMessage('Error Loading Historical Exchange Rate');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function used to render the UI for the past 7 days of exchange rates\r\n   * @param historicalData the data  from exchange rates that have been saved for the past 7 days\r\n   */\r\n  const renderHistoricalData = (historicalData: IdataUnit[]) => {\r\n    //this if only runs when all 7 days have been enterd into the\r\n    if (historicalData.length > 6) {\r\n      //this sorts thhe data by date in the historicalData array\r\n      historicalData.sort(function (a: IdataUnit, b: IdataUnit) {\r\n        //variable that saves the odlest date to be used in the sort method\r\n        let youngestDate: any = new Date(a.date);\r\n        //variable that saves the earliest date to be used in the sort method\r\n        let eldestDate: any = new Date(b.date);\r\n        //sorts the dates in Decending  order\r\n        return youngestDate - eldestDate;\r\n      });\r\n\r\n      /**Function used to generate the UI for the list of the exchanges for the past 7 days\r\n       * @param dataUnit single object in the in the array of exchanges for 7 days\r\n       * each dataUnit contains the exchange rates for the day and the date\r\n       */\r\n      return historicalData.map((dataUnit: IdataUnit) => {\r\n        //extracts the seperate currency keys into an array\r\n        const unitCurrencyKeys = Object.keys(dataUnit.rates);\r\n\r\n        //this .map is used to generate the UI for each day's exchange in a Card format\r\n        return (\r\n          <div key={dataUnit.date} className=\"text-center border-2 m-2\">\r\n            <h1 className=\"text-lg font-bold\">{dataUnit.date}</h1>\r\n            {/* nested .map to generete the text for each day's currency exchanges */}\r\n            {unitCurrencyKeys.map((currencyKey: string | object) => {\r\n              return (\r\n                <p key={`${currencyKey}`}>\r\n                  {/* here we return the currency and it's rate for the day to two decimal places*/}\r\n                  {/* error fixed used for key in Interface */}\r\n                  {/* @ts-ignore */}\r\n                  {currencyKey} {dataUnit.rates[currencyKey].toFixed(2)}\r\n                </p>\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      //if the exchange rates for the week have not been loaded yet, we return a UI that says the data is being loaded\r\n      //could be replaced with a spinner instead, like a MoonLoader\r\n      return (\r\n        <div className={`${error && `text-red-700 font-bold`} text-center`}>\r\n          {loadingMessage}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-sm border-2 border-blue-300 pt-2 m-6  md:w-3/12\">\r\n      <h2 className=\"text-center text-xl mt-0 font-bold\">\r\n        7d Exchange Rate (â¬)\r\n      </h2>\r\n      <div className=\"history\">{renderHistoricalData(historicalData)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HistoricalData;\r\n","import './css/main.css';\r\nimport axios from 'axios';\r\nimport Header from './components/Header';\r\nimport Converter from './components/Converter';\r\nimport { useState, useEffect } from 'react';\r\nimport ConversionHistory from './components/ConversionHistory';\r\nimport HistoricalData from './components/HistoricalData';\r\n\r\nrequire('dotenv').config();\r\nconst { REACT_APP_ACCESS_KEY } = process.env;\r\nconsole.log(process.env);\r\n//the base url for the API call\r\nconst BASE_URL = `http://api.exchangeratesapi.io/v1/latest?access_key=${REACT_APP_ACCESS_KEY}`;\r\nconsole.log(BASE_URL);\r\n\r\n/**\r\n *Component that nests all other components and passes the relative API data to child components\r\n */\r\nconst App = () => {\r\n  //function that fetches the conversion rates data from the API\r\n  const retrieveCurrencies = async () => {\r\n    //here we try to do the API call\r\n    try {\r\n      const response = await axios.get(BASE_URL);\r\n      const currencies = await Object.keys(response.data.rates);\r\n      if (currencies.length > 1) {\r\n        await setCurrencyListOptions(currencies);\r\n        await setExchangeRates(response.data.rates);\r\n      }\r\n      //if the call fails, we display an error message\r\n    } catch (error) {\r\n      alert(\r\n        'Error Retrieving Data From API, please check your Internet connection. Might also be that my API call limit has been reached for the month... fuck... Please refer to the README.md file realted to this repo for the fix :)'\r\n      );\r\n    }\r\n  };\r\n\r\n  //state hook that stores the exchange rates results from the API call\r\n  const [exchangeRates, setExchangeRates] = useState<[]>([]);\r\n  //state hook that stores the different currency names for the select dropdown\r\n  const [currencyListOptions, setCurrencyListOptions] = useState<string[]>([]);\r\n  //state hook that manages the history of the user's currency conversions\r\n  const [conversionHistory, setConversionHistory] = useState([]);\r\n\r\n  //when this component mounts, we call the function to retrieve the exchange rates\r\n  useEffect(() => {\r\n    retrieveCurrencies();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"container mx-auto justify-center flex flex-col md:flex-row\">\r\n        <Converter\r\n          //TS error fix used because I don't know how to type the key of an object yet...\r\n          //@ts-ignore\r\n          rates={exchangeRates}\r\n          options={currencyListOptions}\r\n          setHistory={setConversionHistory}\r\n        />\r\n        <ConversionHistory historyItems={conversionHistory} />\r\n        <HistoricalData />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}